set nocompatible                  " Must come first because it changes other options.
set runtimepath=~/dotfiles/vim,~/dotfiles/vim/after,$VIMRUNTIME
source ~/dotfiles/vim/autoload/pathogen.vim

silent! call pathogen#runtime_append_all_bundles()
silent! call pathogen#pathogen#helptags()





"-----------------------------------------------------------
"--[ Basic setup] ------------------------------------------
"----------------------------------------------------------



syntax enable                     " Turn on syntax highlighting.
syntax on
filetype plugin indent on         " Turn on file type detection.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set noswapfile                    " Don't use swap files, they are annoying!

set tabstop=2                     " Global tab width.
set softtabstop=2
set shiftwidth=2                  " And again, related.
set expandtab                     " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time

" Useful status information at bottom of screen
"set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Automatic fold settings for specific files. Uncomment to use.
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2



" The following are taken from the blog post of Steve Losh
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/
set modelines=0
set encoding=utf-8
set autoindent
set cursorline
set ttyfast

let mapleader = ","
" Fast saves
nmap <leader>w :w!<cr>
nmap <leader>fmt mpgg=G`p

" unnmap arrows

" noremap <Right> <nop>
" noremap <Left> <nop>
" noremap <Up> <nop>
" noremap <Down> <nop>


"Auto change directory to match current file ,cd
" nnoremap ,cd :cd %:p:h<CR>:pwd<CR>
"Resize vsplit
nmap <C-v> :vertical resize +5<cr>
nmap 25 :vertical resize 30<cr>
nmap 50 <c-w>=
nmap 75 :vertical resize 100<cr>

nmap <C-b> :NERDTreeToggle<cr>



"nnoremap / /\v
"vnoremap / /\v
set gdefault
set showmatch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

set textwidth=79
set formatoptions=qrn1
set linebreak
set nolist

" source current file
nnoremap sop :source %<CR>


" To fold tags (for html)
nnoremap <leader>ft Vatzf

" From David Evans
if !exists("autocommands_loaded")
  let autocommands_loaded = 1

  au BufNewFile,BufRead *.md setlocal tw=110
  au BufNewFile,BufRead *.md setlocal spell

  au BufNewFile,BufRead *.txt setlocal tw=72
  au BufNewFile,BufRead *.txt setlocal spell
endif

imap jj <Esc>

" Toggling between showing an hiding invisible characters
nmap <leader>l :set list!<CR>

"Invisible character colors
highlight NonText guifg=#A9A9A9
highlight SpecialKey guifg=#A9A9A9

" Set region to British English
set spelllang=en_gb
" Remember that I can use z= to get suggestions

" Theme
"
" set background=light
set guifont=Input\ Mono\ 14
set guioptions-=T " Removes top toolbar
set guioptions-=r " Removes right hand scroll bar
set go-=L " Removes left hand scroll bar
set go-=l " Removes left hand scroll bar
set go-=r " Removes left hand scroll bar
set go-=R " Removes left hand scroll bar
set linespace=10



" Ctrl-P changes:
" To use Ctrl-P in buffer mode
nmap ; :CtrlPBuffer<CR>
nnoremap <leader>p :CtrlPMRU<CR>

let g:ctrlp_map = '<Leader>t'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|beam|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0

" Force the right number of colours, if the terminal supports it, but
" vim doesn't realise
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
  set t_Co=256
endif

colorscheme atom-dark-256
hi statusline ctermfg=7 ctermbg=0
"colorscheme peel
" In order to adapt indents etc to work well
" with other people's code
nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
nmap \M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
nmap \m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

" Set wrapping
nmap \w :setlocal wrap!<CR>:setlocal wrap?<CR>

" Function for deleting trailing white space.
" Taken from Stackoverflow:
" http://stackoverflow.com/questions/3474709/delete-all-spaces-and-tabs-at-the-end-of-my-lines
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

" handy way of editing .vimrc
nnoremap <leader>rc :e ~/.vimrc<CR>

" Save on lost focus
au FocusLost * :wa
" Delete trailing white space upon saving files
autocmd BufWrite * :call DeleteTrailingWS()
" noremap <leader>w :call DeleteTrailingWS()<CR>

nnoremap <leader><space> :noh<cr>

map <C-z> <Esc>
nnoremap <C-z> <Esc>u
imap <C-z> <Esc>ui
noremap <C-w> :q<cr>




" normal copy/paste
:set clipboard=unnamedplus
:smap <Del> <C-g>"_d
:smap <C-c> <C-g>y
:smap <C-x> <C-g>x
:imap <C-v> <Esc>pi
:smap <C-v> <C-g>p
:smap <Tab> <C-g>1>
:smap <S-Tab> <C-g>1<



" --------------------------------------------------------
" --[ iphp ]----------------------------------------
" --------------------------------------------------------

function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction


autocmd FileType php inoremap <Leader>n <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>n :call PhpInsertUse()<CR>

function! IPhpExpandClass()
  call PhpExpandClass()
  call feedkeys('a', 'n')
endfunction

autocmd FileType php inoremap <Leader>e <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Leader>e :call PhpExpandClass()<CR>


" --------------------------------------------------------
" --[ EasyMotion ]----------------------------------------
" --------------------------------------------------------

let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)



" Search

" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" --------------------------------------------------------
" --[ Navigation ]----------------------------------------
" --------------------------------------------------------

"easier window navigation

nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" For skipping between buffers
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" Tabs
nmap <C-Right> :tabnext<CR>
nmap <C-Left> :tabprevious<CR>

" To make it easier to move with visual lines.
vmap <D-j> gj
vmap <D-k> gk
vmap <D-4> g$
vmap <D-6> g^
vmap <D-0> g^

nmap <D-j> gj
nmap <D-k> gk
nmap <D-4> g$
nmap <D-6> g^
nmap <D-0> g^

nnoremap j gj
nnoremap k gk

